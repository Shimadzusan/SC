package ru.af.web;import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/** * */@SpringBootApplicationpublic class Application {    public static void main(String[] args) {        SpringApplication.run(Application.class, args);    }}package ru.af.formatvacancy;import java.sql.Connection;import java.sql.SQLException;import java.sql.DriverManager;/** * Предоставлет соедиенение с БД */abstract class DBConnection {    /**     * Установить соедиенеие с БД     *     * @return соединение     * @throws SQLException     */    protected Connection getConnection() throws SQLException {        return DriverManager.getConnection(                PropertyHolder.getInstance().DB_URL,                PropertyHolder.getInstance().USER,                PropertyHolder.getInstance().PASSWORD);    }}package ru.af.entity;/** * адресс вакнсии */public class HhAddress {    private String city;    private String street;    private String raw;    public String getCity() {        return city;    }    public void setCity(String city) {        this.city = city;    }    public String getStreet() {        return street;    }    public void setStreet(String street) {        this.street = street;    }    public String getRaw() {        return raw;    }    public void setRaw(String raw) {        this.raw = raw;    }}package ru.af.entity;/** * город вакансии */public class HhArea {    private int id;    private String url;    private String name;    public int getId() {        return id;    }    public void setId(int id) {        this.id = id;    }    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}package ru.af.entity;/** * */public class HhDepartment extends HhIdNameEntiry {}package ru.af.entity;/** * соискатель вакансии */public class HhEmployer {    private String name;    private String url;    private String alternateUrl;    private String id;    private boolean trusted;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public String getAlternateUrl() {        return alternateUrl;    }    public void setAlternateUrl(String alternateUrl) {        this.alternateUrl = alternateUrl;    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public boolean isTrusted() {        return trusted;    }    public void setTrusted(boolean trusted) {        this.trusted = trusted;    }}package ru.af.entity;/** * */public class HhEmployment extends HhIdNameEntiry {}package ru.af.entity;/** * Опыт работы */public class HhExperience extends HhIdNameEntiry {}package ru.af.entity;/** * Created by antonorlov on 16/06/2017. */public abstract class HhIdNameEntiry {    private String id;    private String name;    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}package ru.af.entity;/** * ключевые навыки */public class HhKeySkill {    private String name;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }}package ru.af.entity;import java.util.List;/** * Ответ HH */public class HhResponse {    private List<HhVacancy> items;    private String clusters;    private int perPage;    private int page;    private int pages;    private int found;    private String arguments;    public List<HhVacancy> getItems() {        return items;    }    public void setItems(List<HhVacancy> items) {        this.items = items;    }    public String getClusters() {        return clusters;    }    public void setClusters(String clusters) {        this.clusters = clusters;    }    public int getPerPage() {        return perPage;    }    public void setPerPage(int perPage) {        this.perPage = perPage;    }    public int getPage() {        return page;    }    public void setPage(int page) {        this.page = page;    }    public int getPages() {        return pages;    }    public void setPages(int pages) {        this.pages = pages;    }    public int getFound() {        return found;    }    public void setFound(int found) {        this.found = found;    }    public String getArguments() {        return arguments;    }    public void setArguments(String arguments) {        this.arguments = arguments;    }}package ru.af.entity;/** * з/п вакансии */public class HhSalary {    private int to;    private int from;    private String currency;    public int getTo() {        return to;    }    public void setTo(int to) {        this.to = to;    }    public int getFrom() {        return from;    }    public void setFrom(int from) {        this.from = from;    }    public String getCurrency() {        return currency;    }    public void setCurrency(String currency) {        this.currency = currency;    }    @Override    public String toString() {        return "HhSalary{" +                "to=" + to +                ", from=" + from +                ", currency='" + currency + '\'' +                '}';    }}package ru.af.entity;/** * График работы */public class HhSchedule extends HhIdNameEntiry {}package ru.af.entity;/** */public class HhSnippet {    private String requirement;    private String responsibility;    public String getRequirement() {        return requirement;    }    public void setRequirement(String requirement) {        this.requirement = requirement;    }    public String getResponsibility() {        return responsibility;    }    public void setResponsibility(String responsibility) {        this.responsibility = responsibility;    }}package ru.af.entity;/** * */public class HhType  extends HhIdNameEntiry{}package ru.af.entity;import java.util.Date;import java.util.List;/** * Вакансия */public class HhVacancy {    private long id;    private String name;    private String url;    private Date publishedAt;    private Date createdAt;    private boolean responseLetterRequired;    private String description;    private HhArea area;    private HhSalary salary;    private HhEmployer employer;    private HhAddress address;    private HhExperience experience;    private HhSnippet snippet;    private HhDepartment department;    private List<HhKeySkill> keySkills;    public String getName() {        return name;    }    public void setName(String name) {        this.name = name;    }    public HhSalary getSalary() {        return salary;    }    public void setSalary(HhSalary salary) {        this.salary = salary;    }    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public HhArea getArea() {        return area;    }    public void setArea(HhArea area) {        this.area = area;    }    public long getId() {        return id;    }    public void setId(long id) {        this.id = id;    }    public Date getPublishedAt() {        return publishedAt;    }    public void setPublishedAt(Date publishedAt) {        this.publishedAt = publishedAt;    }    public HhEmployer getEmployer() {        return employer;    }    public void setEmployer(HhEmployer employer) {        this.employer = employer;    }    public boolean isResponseLetterRequired() {        return responseLetterRequired;    }    public void setResponseLetterRequired(boolean responseLetterRequired) {        this.responseLetterRequired = responseLetterRequired;    }    public HhAddress getAddress() {        return address;    }    public void setAddress(HhAddress address) {        this.address = address;    }    public HhExperience getExperience() {        return experience;    }    public void setExperience(HhExperience experience) {        this.experience = experience;    }    public HhSnippet getSnippet() {        return snippet;    }    public void setSnippet(HhSnippet snippet) {        this.snippet = snippet;    }    public HhDepartment getDepartment() {        return department;    }    public void setDepartment(HhDepartment department) {        this.department = department;    }    public List<HhKeySkill> getKeySkills() {        return keySkills;    }    public void setKeySkills(List<HhKeySkill> keySkills) {        this.keySkills = keySkills;    }}package ru.af.formatvacancy;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStream;import java.util.Properties;/** * Получение и хранение данных из application.properties */public class PropertyHolder {    public final String PATHFILE;    public final String DB_URL;    public final String USER;    public final String PASSWORD;    public final String MODE;    public final String EXPIRIENCE;    public final String BASE_URL;    private static PropertyHolder instance;    private PropertyHolder() {        // инициализация свойств-констант        Properties properties = loadProperties();        PATHFILE = properties.getProperty("filepath");        DB_URL = properties.getProperty("dburl");        USER = properties.getProperty("user");        PASSWORD = properties.getProperty("password");        MODE = properties.getProperty("hh.mode");        EXPIRIENCE= properties.getProperty("experience");        BASE_URL= properties.getProperty("base_url");    }    /**     * Дает создание единственнго экзамляра класса PropertyHolder     * @return PropertyHolder     */    public static PropertyHolder getInstance() {        if (instance == null) {            instance = new PropertyHolder();        }        return instance;    }    /**     * Загружает данные из файла application.properties со свойствами     * @return prop Properties     */    private static Properties loadProperties() {        Properties prop = new Properties();        InputStream input = null;        try {            input = new FileInputStream("src/main/resources/application.properties");            prop.load(input);        } catch (IOException e) {            e.printStackTrace();        } finally {            if (input != null) {                try {                    input.close();                } catch (IOException e) {                    e.printStackTrace();                }            }        }        return prop;    }}package ru.af.json;import org.apache.http.HttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.utils.URIBuilder;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClientBuilder;import ch.qos.logback.core.net.SyslogOutputStream;import ru.af.formatvacancy.PropertyHolder;import java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;import java.net.URI;import java.net.URISyntaxException;/** * Получение вакансий в форамате json из API HH и * их перобразование для дальнейших действий */ class RequestUtil {    private static final String VACANCIES_PATH = "vacancies";    private static final String PAGE_PARAM = "page";    //текстовое поле    private static final String TEXT_PARAM = "text";    //регион. Справочник с возможными значениями: /areas    private static final String AREA_PARAM = "area";    //опыт работы.    private static final String EXPERIENCE_PARAM = "experience";    //это код СПб в API HH    private static final String SPB_CODE = "2";    /**     * Получиь json с вакансиями     *     * @param page  страница     * @param query поисковой запрос     * @return переведенная в строку из json вакакнсия     */    static String getVacancies(int page, final String query) {        try {        	//System.out.println("HI!!!");            URI uri = new URIBuilder()                    .setScheme("https")                    .setHost("api.hh.ru")                    .setPath(VACANCIES_PATH)                    .setParameter(TEXT_PARAM, query)                    .setParameter(PAGE_PARAM, page + "")                    .setParameter(AREA_PARAM, SPB_CODE)                    .setParameter(EXPERIENCE_PARAM, PropertyHolder.getInstance().EXPIRIENCE)                    .build();            HttpGet getRequest = new HttpGet(uri);            //getRequest.addHeader("accept", "application/json");            System.out.println("!");            System.out.println(getRequest);            return getJson(getRequest);        } catch (URISyntaxException ex) {            ex.printStackTrace();        }        return null;    }    /**     * Получить json запрошенного через getRequest     *     * @param getRequest get-запрос для полукчение вакансии в формате json     * @return конвертированный json в объект string     */    private static String getJson(HttpGet getRequest) {        HttpClientBuilder builder = HttpClientBuilder.create();        CloseableHttpClient httpClient = builder.build();        try {            HttpResponse response = httpClient.execute(getRequest);            if (response.getStatusLine().getStatusCode() != 200) {                throw new RuntimeException("Failed : HTTP error code : "                        + response.getStatusLine().getStatusCode());            }            BufferedReader br = new BufferedReader(                    new InputStreamReader((response.getEntity().getContent())));            String result = "";            String output;            while ((output = br.readLine()) != null) {                result += output;            }            System.out.println(result);            httpClient.close();            return result;        } catch (IOException ex) {            ex.printStackTrace();        }        return null;    }}package ru.af.formatvacancy;/** * Класс, содержащий поля (id, имя, з/п, опыт, город) вакансии */public class Vacancy {    private String vacancyArea;    private String vacancyExperience;    private String vacancySalary;    private String vacancyName;    private String url;    private String id;    public Vacancy() {    }    public Vacancy(String id, String vacancyName, String vacancySalary,                   String vacancyExperience, String vacancyArea, String url) {        this.vacancyArea = vacancyArea;        this.vacancyExperience = vacancyExperience;        this.vacancySalary = vacancySalary;        this.vacancyName = vacancyName;        this.url = url;        this.id = id;    }    public String getVacancyArea() {        return vacancyArea;    }    public void setVacancyArea(String vacancyArea) {        this.vacancyArea = vacancyArea;    }    public String getVacancyExperience() {        return vacancyExperience;    }    public void setVacancyExperience(String vacancyExperience) {        this.vacancyExperience = vacancyExperience;    }    public String getVacancySalary() {        return vacancySalary;    }    public void setVacancySalary(String vacancySalary) {        this.vacancySalary = vacancySalary;    }    public String getVacancyName() {        return vacancyName;    }    public void setVacancyName(String vacancyName) {        this.vacancyName = vacancyName;    }    public String getUrl() {        return url;    }    public void setUrl(String url) {        this.url = url;    }    public String getId() {        return id;    }    public void setId(String id) {        this.id = id;    }    @Override    public boolean equals(Object o) {        if (this == o) return true;        if (o == null || getClass() != o.getClass()) return false;        Vacancy vacancy = (Vacancy) o;        return id.equals(vacancy.id);    }    @Override    public int hashCode() {        return id.hashCode();    }    @Override    public String toString() {        return "Vacancy{" +                "vacancyArea='" + vacancyArea + '\'' +                ", vacancyExperience='" + vacancyExperience + '\'' +                ", vacancySalary='" + vacancySalary + '\'' +                ", vacancyName='" + vacancyName + '\'' +                ", url='" + url + '\''+                ", id='" + id + '\'' +                '}';    }}package ru.af.web.controller;import org.springframework.stereotype.Controller;import org.springframework.ui.Model;import org.springframework.web.bind.annotation.RequestMapping;import ru.af.formatvacancy.Vacancy;import ru.af.json.VacancyService;import java.util.List;/** * Контроллер главной страницы веб-интерфейса */@Controllerpublic class VacancyController {    @RequestMapping(value = {"/", "/index.html"})    public String getContests(Model model) {        List<Vacancy> vacancies = VacancyService.getVacancies();        if (vacancies == null || vacancies.isEmpty()) {            VacancyService.updateVacancies();            vacancies = VacancyService.getVacancies();        }        model.addAttribute("list", vacancies);        return "index";    }    @RequestMapping("/update")    public String index() {        VacancyService.updateVacancies();        return "redirect:/";    }}package ru.af.formatvacancy;import java.sql.*;import java.util.ArrayList;import java.util.List;/** * Чтение вакансий из БД */public class VacancyDBReader extends DBConnection implements VacancyReaderInt {    private static final String QUERY = "select * from vacancy";    /**     * Получить все вакансий из БД     *     * @return список всех вакансий, полученный из БД     */    @Override    public List<Vacancy> getAllVacancies() {        ArrayList<Vacancy> listOfVacancies = new ArrayList<>();        Connection conn = null;        try {            conn = getConnection();            //передается select-запрос            PreparedStatement ps = conn.prepareStatement(QUERY);            ResultSet rs = ps.executeQuery();            while (rs.next()) {                Vacancy vacancy = new Vacancy(                        rs.getString("id"),                        rs.getString("vacancyName"),                        rs.getString("vacancySalary"),                        rs.getString("vacancyExperience"),                        rs.getString("vacancyArea"),                        rs.getString("url")                );                listOfVacancies.add(vacancy);            }            rs.close();            ps.close();        } catch (SQLException e) {            e.printStackTrace();        } finally {            if (conn != null) {                try {                    conn.close();                } catch (SQLException e) {                    e.printStackTrace();                }            }        }        return listOfVacancies;    }}package ru.af.formatvacancy;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.SQLException;import java.util.Collection;/** * Предоставляет функции изменения данных о вакансиях в БД */public class VacancyDBWriter extends DBConnection implements VacancyWriterInt {    private final String INSERT = "insert into vacancy " +            "(id, vacancyname, vacancysalary, vacancyexperience, vacancyarea, url) " +            "values (?, ?, ?, ?, ?, ?);";    private final String DELETE = "delete from vacancy where id = ?";    private final String UPDATE =            "update vacancy SET " +                    " ,vacancyname = ?  " +                    " ,vacancysalary = ? " +                    " ,vacancyexperience = ? " +                    " ,vacancyarea = ? " +                    "WHERE id = ? ";    /**     * Записывает вакансию в БД     *     * @param list список вакансий для заненсения в БД     */    @Override    public void insert(Collection<Vacancy> list) {        Connection conn = null;        try {            conn = getConnection();            PreparedStatement ps = conn.prepareStatement(INSERT);            for (Vacancy vacancy : list) {                ps.setString(1, vacancy.getId());                ps.setString(2, vacancy.getVacancyName());                ps.setString(3, vacancy.getVacancySalary());                ps.setString(4, vacancy.getVacancyExperience());                ps.setString(5, vacancy.getVacancyArea());                ps.setString(6, vacancy.getUrl());                ps.executeUpdate();            }            ps.close();        } catch (SQLException e) {            throw new RuntimeException(e);        } finally {            if (conn != null) {                try {                    conn.close();                } catch (SQLException e) {                }            }        }    }    /**     * Удаляет вакнсию из БД     *     * @param id идентификатор удаляемой вакансии     */    @Override    public void deleteVacancy(String id) {        Connection conn = null;        try {            conn = getConnection();            PreparedStatement ps = conn.prepareStatement(DELETE);            ps.setString(1, id);            ps.executeUpdate();            ps.close();        } catch (SQLException e) {            e.printStackTrace();        } finally {            if (conn != null) {                try {                    conn.close();                } catch (SQLException e) {                }            }        }    }    /**     * Обновляет вакансию     *     * @param vacancy обновляемая вакансия     */    @Override    public void updateVacancy(Vacancy vacancy) {        Connection conn = null;        try {            conn = getConnection();            PreparedStatement ps = conn.prepareStatement(UPDATE);            ps.setString(1, vacancy.getVacancyName());            ps.setString(2, vacancy.getVacancySalary());            ps.setString(3, vacancy.getVacancyExperience());            ps.setString(4, vacancy.getVacancyArea());            ps.setString(5, vacancy.getId());            ps.executeUpdate();            ps.close();            conn.close();        } catch (SQLException e) {            e.printStackTrace();        }    }}package ru.af.formatvacancy;import java.util.List;/** * Позволяет получить список вкансий, хранящихся в БД или в txt файле */public interface VacancyReaderInt {    /**     * Получает список всех вакансий     *     * @return     */    List<Vacancy> getAllVacancies();}package ru.af.json;import ru.af.formatvacancy.*;import java.util.*;/** * Предоставляет функции обновления и получения вакансий из/в txt файл */public class VacancyService {    /**     * Обновить вакансии (запись новых вакансий, обновление старых и     * удаление уставевших вакансий)     */    public static void updateVacancies() {        VacancyReaderInt reader;        VacancyWriterInt writer;        if ("db".equals(PropertyHolder.getInstance().MODE)) {            reader = new VacancyDBReader();            writer = new VacancyDBWriter();        } else {            reader = new VacancyTxtReader();            writer = new VacancyTxtWriter();        }        List<Vacancy> savedVacancies = reader.getAllVacancies();        //получить вакансии из API        List<Vacancy> downloadedVacancies =                VacancyUtil.downloadVacancies(100, "java");        Map<String, Vacancy> savedVacanciesMap = new HashMap<>();        //добавить все вакансии в мапку        for (Vacancy savedVacancy : savedVacancies) {            savedVacanciesMap.put(savedVacancy.getId(), savedVacancy);        }        //удалить устаревшие вакансии        for (Vacancy vacancy : downloadedVacancies) {            if (!savedVacanciesMap.containsKey(vacancy.getId())) {                savedVacanciesMap.remove(vacancy.getId());                writer.deleteVacancy(vacancy.getId());            }        }        Set<Vacancy> newVacancies = new HashSet<>();        List<Vacancy> updatedVacancies = new ArrayList<>();        for (Vacancy downloadedVacancy : downloadedVacancies) {            if (savedVacanciesMap.containsKey(downloadedVacancy.getId())) {                if (!downloadedVacancy.equals(                        savedVacanciesMap.get(downloadedVacancy.getId()))) {                    updatedVacancies.add(downloadedVacancy);                }            } else {                newVacancies.add(downloadedVacancy);            }        }        //записать мапку в файл или в БД        writer.insert(newVacancies);        for (Vacancy vacancy : updatedVacancies) {            writer.updateVacancy(vacancy);        }    }    /**     * Получичть список вакансий из txt файла     *     * @return список вакансий из txt файла     */    public static List<Vacancy> getVacancies() {        VacancyReaderInt reader;        if ("db".equals(PropertyHolder.getInstance().MODE)) {            reader = new VacancyDBReader();        } else {            reader = new VacancyTxtReader();        }        return reader.getAllVacancies();    }}package ru.af.formatvacancy;import java.io.BufferedReader;import java.io.FileInputStream;import java.io.IOException;import java.io.InputStreamReader;import java.util.ArrayList;import java.util.List;/** * Чтение вакансий из txt файла */public class VacancyTxtReader implements VacancyReaderInt {    /**     * Получает список ваканский из txt файла. Путь файла-PATHFILE     * @return список ваканский, загруженных из файла     */    public List<Vacancy> getAllVacancies() {        List<Vacancy> listOfVacancies = new ArrayList<>();        try {            FileInputStream fstream = new FileInputStream(                    PropertyHolder.getInstance().PATHFILE);            BufferedReader br = new BufferedReader(new InputStreamReader(fstream));            String line;            while ((line = br.readLine()) != null) {                if (line.trim().length() == 0) {                    continue;                }                Vacancy vacancy = new Vacancy();                //разбивка по полям разделителем @@@                String[] fields = line.split("@@@");                vacancy.setId(fields[0]);                vacancy.setVacancyName(fields[1]);                vacancy.setVacancyArea(fields[2]);                vacancy.setVacancyExperience(fields[3]);                vacancy.setVacancySalary(fields[4]);                listOfVacancies.add(vacancy);            }        } catch (IOException ex) {            ex.printStackTrace();        }        return listOfVacancies;    }}package ru.af.formatvacancy;import ru.af.entity.HhVacancy;import ru.af.json.VacancyService;import ru.af.json.VacancyUtil;import java.io.File;import java.io.IOException;import java.io.PrintWriter;import java.util.ArrayList;import java.util.Collection;import java.util.List;/** * Позволяет записать вакансию или лист вакансий в txt файл */public class VacancyTxtWriter implements VacancyWriterInt {    /**     * Записывает лист вакнсий в txt файл     *     * @param list список вакансий, полученных из VacancyUtil     */    public void writeHhVacancy(List<HhVacancy> list) {        List<Vacancy> result = new ArrayList<>();        VacancyUtil.convert(list);        insert(result);    }    /**     * Добавляет вакансию в фаил     * @param list     */    public void insert(Collection<Vacancy> list) {        File vacancies = new File(PropertyHolder.getInstance().PATHFILE);        PrintWriter out = null;        try {            if (!vacancies.exists()) {                vacancies.createNewFile();            }            out = new PrintWriter(vacancies.getAbsoluteFile());            String separator = "@@@";            for (Vacancy convert : list) {                StringBuilder sb = new StringBuilder("");                sb.append(convert.getId());                sb.append(separator);                sb.append(convert.getVacancyName());                sb.append(separator);                sb.append(convert.getVacancyArea());                sb.append(separator);                sb.append(convert.getVacancyExperience());                sb.append(separator);                sb.append(convert.getVacancySalary());                sb.append(System.lineSeparator());                out.print(sb);            }        } catch (IOException e) {            e.printStackTrace();        } finally {            if (out != null) {                out.close();            }        }    }    @Override    public void updateVacancy(Vacancy vacancy) {    }    @Override    public void deleteVacancy(String id) {    }}package ru.af.json;import com.google.gson.Gson;import ru.af.entity.HhResponse;import ru.af.entity.HhVacancy;import ru.af.formatvacancy.Vacancy;import ru.af.formatvacancy.PropertyHolder;import java.util.ArrayList;import java.util.List;/** * */public class VacancyUtil {    /**     * Преобразует вакансии из формата json в список вакнсий в формате HhVacancy     *     * @return список вакансий     */    private static List<HhVacancy> convertToVacancies(String json) {        Gson gson = new Gson();        HhResponse hhResponse = gson.fromJson(json, HhResponse.class);        return hhResponse.getItems();    }    /**     * Получить кол-во страниц по поисковому запросу     *     * @param query поисковой запрос     * @return кол-во вакансий     */    private static int getTotalPages(final String query) {        final String json = RequestUtil.getVacancies(0, query);        Gson gson = new Gson();        HhResponse hhResponse = gson.fromJson(json, HhResponse.class);        return hhResponse.getPages();    }    /**     * Преобразует лист HHVacancy в лист Vacancy     *     * @param list список вакансий в формате HHVacancy     * @return список вакнсий в формате Vacancy     */    public static List<Vacancy> convert(List<HhVacancy> list) {        List<Vacancy> vacancies = new ArrayList<>();        for (HhVacancy v : list) {            Vacancy shortVacancy = new Vacancy();            if (v.getArea() != null) {                shortVacancy.setVacancyArea(v.getArea().getName());            } else {                shortVacancy.setVacancyArea("Город вакансии не указан");            }            shortVacancy.setVacancyExperience("Нет опыта");            //fixme: остальные варианты опыта            if (v.getSalary() != null) {                String salary = "";                if (v.getSalary().getFrom() != 0) {                    salary += "от " + v.getSalary().getFrom() + " ";                }                if (v.getSalary().getTo() != 0) {                    salary += "до " + v.getSalary().getTo();                }                shortVacancy.setVacancySalary(salary);            } else {                shortVacancy.setVacancySalary("размер з/п не указан");            }            shortVacancy.setVacancyName(v.getName());            shortVacancy.setId(String.valueOf(v.getId()));            String baseUrl = PropertyHolder.getInstance().BASE_URL;            shortVacancy.setUrl(baseUrl + v.getId());            vacancies.add(shortVacancy);        }        return vacancies;    }    /**     * Получить список вакансий из API HH     *     * @param number максимальное кол-во вакансий     * @param query  поисковое слово, например java     * @return список вакансий     */    public static List<Vacancy> downloadVacancies(int number, String query) {        int totalPages = VacancyUtil.getTotalPages(query);        int counter = 0;        final List<HhVacancy> result = new ArrayList<>(number);        for (int i = 0; i < totalPages; i++) {            if (counter >= number) {                return VacancyUtil.convert(result);            }            String vacanciesJson = RequestUtil.getVacancies(i, query);            List<HhVacancy> vacancies = VacancyUtil.convertToVacancies(vacanciesJson);            result.addAll(vacancies);            counter += vacancies.size();        }        return VacancyUtil.convert(result);    }}package ru.af.formatvacancy;import java.util.Collection;/** * Позволяет получить список вкансий, хранящихся в БД или в txt файле */public interface VacancyWriterInt {    void insert(Collection<Vacancy> list);    void deleteVacancy(String id);    void updateVacancy(Vacancy vacancy);}
